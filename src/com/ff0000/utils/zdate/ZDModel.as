package com.ff0000.utils.zdate {		import flash.events.EventDispatcher;	import flash.events.Event;		public class ZDModel extends EventDispatcher {		/* -- TIMESTAMP -------------------------------------------		 *		 *	time will always be UTC in seconds		 *		 */		private var _timestamp:int;		internal function set timestamp( $_value:int ):void {			setTimestamp( $_value );			propagateTimestampToDateElements();		}		internal function setTimestamp( $_value:int ):void {			_timestamp = $_value;		}		internal function get timestamp():int {			return _timestamp;		}				/* -- CONSTANTS -------------------------------------------		 *		 *		 */		// base UTC constants		internal const UTC_BASE_YEAR:int = 1970;		internal const UTC_BASE_MONTH:int = 0;		internal const UTC_BASE_DAY:int = 0;				// leap seconds - these are periodically and indiscriminately announced and added either on June 30 or Dec 31		internal const LEAP_SECONDS:Array = [			78732000,94633200,126169200,157705200,189241200,220863600,252399600,283935600,315471600,362728800,394264800,425800800,			488959200,567932400,631090800,662626800,709884000,741420000,772956000,820393200,867650400,915087600,1136012400,1230706800		];				// string equivalents		internal const MONTHS_FULL:Array = ['january','february','march','april','may','june','july','august','september','october','november','december'];		internal const MONTHS_ABRV:Array = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];		internal const MONTHS_EXCP:Array = ['','','','','','','','','sept','','',''];				internal const WEEKDAYS_FULL:Array = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'];		internal const WEEKDAYS_ABRV:Array = ['sun','mon','tue','wed','thu','fri','sat'];		internal const WEEKDAYS_EXCP1:Array = ['','','tues','wednes','thur','',''];		internal const WEEKDAYS_EXCP2:Array = ['','','','','thurs','',''];				// defaults		internal var DEFAULT_YEAR:int;		/* --- DATE ELEMENTS ---------------------------------------------------------------------------------------------		 *		 *		 */		// year		private var __year:int;		internal function set year( $_year:int ):void { 			setYear( $_year ); 			propagateDateElementsToTimestamp();		}		internal function setYear( $_year:int ):void {			if( $_year < 100 ) {				if( $_year < 69 ) 					__year = 2000 + $_year;				else __year = 1900 + $_year;			}			else __year = $_year;		}		internal function get year():int {			return __year;		}				// month		private var __month:int;		internal function set month( $_month:* ):void {			setMonth( $_month );			propagateDateElementsToTimestamp();		}		internal function setMonth( $_month:* ):void {			if( $_month is String ) {				$_month = $_month.toLowerCase();				var _i:int = 0;				for( _i = 0; _i < 12; _i++ ) {					if( MONTHS_FULL[_i] == $_month || MONTHS_ABRV[_i] == $_month || MONTHS_EXCP[_i] == $_month ) {						__month = _i + 1;						break;					}				}			}			else {				__month = $_month;				while( __month > 12 ) {					setYear( year + 1 );					__month -= 12				}				while( __month < 1 ) {					setYear( year - 1 );					__month += 12;				}			}		}		internal function get month():int {			return __month;		}				// day		private var __day:int;		internal function set day( $_day:int ):void {			setDay( $_day );			propagateDateElementsToTimestamp();		}		internal function setDay( $_day:int ):void {			__day = $_day;			var _daysInMonth:int = zdUtil.daysInMonthOf( month-1, year );			while( __day > _daysInMonth ) {				setMonth( month + 1 );				__day -= _daysInMonth;				_daysInMonth = zdUtil.daysInMonthOf( month-1, year );			}			while( __day <= 0 ) {				setMonth( month - 1 );				_daysInMonth = zdUtil.daysInMonthOf( month-1, year );				__day += _daysInMonth;			}		}		internal function get day():int {			return __day;		}				// hour		private var __hour:int;		internal function set hour( $_hour:Number ):void {			setHour( $_hour );			propagateDateElementsToTimestamp();		}		internal function setHour( $_hour:Number ):void {			__hour = Math.floor( $_hour );			if( $_hour != __hour )				setMinute( minute + ( $_hour - __hour ) * 60 );			while( __hour >= 24 ) {				setDay( day + 1 );				__hour -= 24;			}			while( __hour < 0 ) {				setDay( day - 1 );				__hour += 24;			}		}		internal function get hour():Number {			return __hour;		}				// minute		private var __minute:int;		internal function set minute( $_minute:Number ):void {			setMinute( $_minute );			propagateDateElementsToTimestamp();		}		internal function setMinute( $_minute:Number ):void {			__minute = Math.floor( $_minute );			if( $_minute != __minute )				setSecond( second + ( $_minute - __minute ) * 60 );			while( __minute >= 60 ) {				setHour( hour + 1 );				__minute -= 60;			}			while( __minute < 0 ) {				setHour( hour - 1 );				__minute += 60;			}		}		internal function get minute():Number {			return __minute;		}				// second		private var __second:int;		internal function set second( $_second:Number ):void {			setSecond( $_second );			propagateDateElementsToTimestamp();		}		internal function setSecond( $_second:Number ):void {			__second = Math.round( $_second );			while( __second >= 60 ) {				setMinute( minute + 1 );				__second -= 60;			}			while( __second < 0 ) {				setMinute( minute - 1 );				__second += 60;			}		}		internal function get second():Number {			return __second;		}				// timezone offset in seconds		private var _timezoneOffset:int;		internal function set timezoneOffset( $_timezoneOffset:int ):void {			setTimezoneOffset( $_timezoneOffset );			propagateTimestampToDateElements();		}		internal function setTimezoneOffset( $_timezoneOffset:int ):void {			_timezoneOffset = $_timezoneOffset;		}		internal function get timezoneOffset():int {			return _timezoneOffset;		}				// weekday		private var __weekdayIndex:int;		internal function set weekday( $_weekday:String ):void {			setWeekday( $_weekday );			propagateDateElementsToTimestamp();		}		internal function setWeekday( $_weekday:String ):void {			$_weekday = $_weekday.toLowerCase();			var _i:int = 0;			for( _i = 0; _i < 7; _i++ ) {				if( WEEKDAYS_FULL[_i] == $_weekday || WEEKDAYS_ABRV[_i] == $_weekday || WEEKDAYS_EXCP1[_i] == $_weekday || WEEKDAYS_EXCP2[_i] == $_weekday ) {					__weekdayIndex = _i;					break;				}			}		}		internal function get weekday():String {			return WEEKDAYS_FULL[__weekdayIndex];		}		internal function getWeekdayIndex():int {			return __weekdayIndex;		}				// now range		private var __nowRange:int;		internal function set nowRange( $_nowRange:int ):void {			__nowRange = $_nowRange;		}		internal function get nowRange():int {			return __nowRange;		}						// tomorrow begins at		private var __tomorrowBeginsAt:int;		internal function set tomorrowBeginsAt( $_tomorrowBeginsAt:int ):void {			__tomorrowBeginsAt = $_tomorrowBeginsAt;		}		internal function get tomorrowBeginsAt():int {			return __tomorrowBeginsAt;		}						// get day start in utc		internal function getDayStartInUTC():int {			return timestamp - ( zdUtil.hoursToSeconds( hour ) + zdUtil.minutesToSeconds( minute ) + second - timezoneOffset ) + tomorrowBeginsAt;		}				// get week start in utc		internal function getWeekStartInUTC():int {			return getDayStartInUTC() - zdUtil.hoursToSeconds( getWeekdayIndex() * 24 );		}		/* --- MISC DATA ---------------------------------------------------------------------------------------------		 *		 *		 */		internal var correctForDst:Boolean = true;		/* --- SINGLETON SETUP ---------------------------------------------------------------------------------------		 *		 *		 */		private static var instance:ZDModel;		private var zdUtil:ZDUtil;		// singleton management		public static function getInstance():ZDModel {			if( instance == null ) {				instance = new ZDModel();			}			return instance;		}		public function ZDModel():void {			DEFAULT_YEAR = new Date().fullYear;			zdUtil = new ZDUtil();			instance = this;		}										/* --- DISPATCHERS ---------------------------------------------------------------------------------------------		 *		 *		 */		private function propagateTimestampToDateElements():void {			dispatchEvent( new Event( 'propagateTimestampToDateElements' ));		}				private function propagateDateElementsToTimestamp():void {			dispatchEvent( new Event( 'propagateDateElementsToTimestamp' ));		}	}}