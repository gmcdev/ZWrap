package com.ff0000.utils.zdate {			public class ZDate {		/* --- TIMESTAMP ---------------------------------------------------------------------------------------------		 *		 *		timestamp 		int						UTC time in seconds		 */		public function set timestamp( $_value:int ):void {			zdModel.timestamp = $_value;		}		public function get timestamp():int {			return zdModel.timestamp;		}		/* --- YEAR ---------------------------------------------------------------------------------------------		 *		 *		year			int		 				2-digit and 4-digit representations		 */		public function set year( $_year:int ):void { 			zdModel.year = $_year;		}		public function get year():int {			return zdModel.year;		}						/* --- YEAR ---------------------------------------------------------------------------------------------		 *		 *		month			int/string				common abbreviations, fullname, and month-number		 */		public function set month( $_month:* ):void {			zdModel.month = $_month;		}		public function get month():int {			return zdModel.month;		}						/* --- DAY ---------------------------------------------------------------------------------------------		 *		 *		day				int						numerical day of month		 */		public function set day( $_day:int ):void {			zdModel.day = $_day;		}		public function get day():int {			return zdModel.day;		}		/* --- HOUR ---------------------------------------------------------------------------------------------		 *		 *		hour			int						24 hour format		 */		public function set hour( $_hour:Number ):void {			zdModel.hour = $_hour;		}		public function get hour():Number {			return zdModel.hour;		}						/* --- MINUTE ---------------------------------------------------------------------------------------------		 *		 *		minute			int						0-59		 */		public function set minute( $_minute:Number ):void {			zdModel.minute = $_minute;		}		public function get minute():Number {			return zdModel.minute;		}				/* --- SECOND ---------------------------------------------------------------------------------------------		 *		 *		second			int						0-59		 */		public function set second( $_second:Number ):void {			zdModel.second = $_second;		}		public function get second():Number {			return zdModel.second;		}						/* --- TIMEZONE OFFSET -----------------------------------------------------------------------------------		 *		 *		timezone offset	as string/number		"(UTC|GMT|Z)(-|+)[0-9]{2,4}" / or in hours & fractions thereof		 */		public function set timezoneOffset( $_timezoneOffset:* ):void {			if( $_timezoneOffset is String ) {				zdControl.interpretTimezoneOffset( $_timezoneOffset );			}			else if( $_timezoneOffset is Number ) {				if( Math.abs( $_timezoneOffset ) < 24 )					zdModel.timezoneOffset = $_timezoneOffset * 3600;				else zdModel.timezoneOffset = $_timezoneOffset;			}			zdControl.propagateTimestampToDateElements();		}		public function get timezoneOffset():Number {			return zdModel.timezoneOffset / 3600;		}						/* --- WEEKDAY -------------------------------------------------------------------------------------------		 *		 *		weekday			String					common abbreviations and fullname		 */		public function set weekday( $_weekday:String ):void {			zdModel.weekday = $_weekday;		}		public function get weekday():String {			return zdModel.weekday;		}		/* --- NOW RANGE -------------------------------------------------------------------------------------------		 *		 *		nowRange		int					the number of seconds that will cause this time to print "now"		 */		private var _nowRange:int; // default set in constructor		public function set nowRange( $_nowRange:int ):void {			zdModel.nowRange = $_nowRange;		}		public function get nowRange():int {			return zdModel.nowRange;		}		/* --- TOMORROW BEGINS AT ----------------------------------------------------------------------------------		 *		 *		tomorrowBeginsAt	int					the number of seconds past 00:00:00 that will cause this time to print "tomorrow"		 */		private var _tomorrowBeginsAt:int; // default set in constructor		public function set tomorrowBeginsAt( $_tomorrowBeginsAt:int ):void {			zdModel.tomorrowBeginsAt = $_tomorrowBeginsAt;		}		public function get tomorrowBeginsAt():int {			return zdModel.tomorrowBeginsAt;		}		/* --- VERBOSITY -------------------------------------------------------------------------------------------		 *		 *		verbosity			int					0 = no trace, 1 = all trace		 */		public function set verbosity( $_level:int ):void {			zdTrace.startZDTrace( $_level );		}										// --- PRIVATE --------------------------		private var zdModel:ZDModel;		private var zdView:ZDView;		private var zdControl:ZDControl;		private var zdUtil:ZDUtil;		private var zdTrace:ZDTrace;		/* -- CONSTRUCTOR ----------------------------------------------------		 *		 *	Instantiating with a datetime( flash:Date, timecode:int, date:String ) is the same as calling ZDate.makeTimeFrom(...)		 *	 - $_nowRange indicates the number of seconds after this time that format( 'R' ) will return relationship to now as "now".		 *	 - $_tomorrowBeginsAt is the number of seconds into the tomorrow of this time that format( 'R' ) will still qualify as "today/tonight"		 */		public function ZDate( $_dateTime:* = null, $_nowRange:int = 12600, $_tomorrowBeginsAt:int = 10800 ) {			zdModel = new ZDModel(); // singleton, make one instance for this ZDate()			zdTrace = new ZDTrace(); // singleton, make one instance for this ZDate()			zdView = new ZDView();			zdControl = new ZDControl();			zdUtil = new ZDUtil();			nowRange = $_nowRange;			tomorrowBeginsAt = $_tomorrowBeginsAt;			if( $_dateTime ) 				makeTimeFrom( $_dateTime );		}										/* -- CREATE DATE OBJECT ------------------------------------------------------------------------------------		 *		 *	make time from Flash-Date, Date-String, or Unix Timestamp		 *	 - $_correctForDst should not normally need to be used, because we can generally assume that,		 *		in daylight savings, all times will shift, including the local-machine's time as well as the servers		 *	 - However, in cases where you need to circumvent this logic, then $_correctForDst=true will determine		 *		if the time is during DST and apply the correct offset accordingly.		 */		public function makeTimeFrom( $_dateTime:* = null, $_correctForDst:Boolean = false ):void {			zdTrace.log( this+' makeTimeFrom() '+$_dateTime+', correctForDst? '+$_correctForDst, 1 );			if( $_dateTime is Date ) {				zdTrace.log( this+'  - is Date', 1 );				zdModel.correctForDst = false; // assume a Flash date has DST built-into the GMT offset				zdControl.convertToDateElementsFrom( $_dateTime.toString());				zdControl.propagateDateElementsToTimestamp();			}			else if( $_dateTime is int ) {				zdTrace.log( this+'  - is int', 1 );				zdModel.correctForDst = false; // no gmt or dst on a timestamp				zdModel.setTimestamp( $_dateTime );				zdControl.propagateTimestampToDateElements();			}			else {				zdTrace.log( this+'  - is String', 1 );				zdModel.correctForDst = $_correctForDst; // allow user to specify a zone and time, then check to correct GMT for DST				zdControl.convertToDateElementsFrom( String( $_dateTime ));				zdControl.propagateDateElementsToTimestamp();			}			}										/* -- FORMAT DATE OBJECT -----------------------------------------------------------------------------------------		 *		 *	format the value of this time object using the following codes: http://us2.php.net/manual/en/function.date.php		 *		 */		public function format( $_code:String, $_timestamp:int=0 ):String {			if( $_timestamp != 0 ) {				zdModel.correctForDst = false; // no gmt or dst on a timestamp				zdModel.setTimestamp( $_timestamp );				zdControl.propagateTimestampToDateElements();			}			return zdView.processPrintRequest( $_code );		}										/* -- PUBLIC DATE UTILITIES --------------------------------------------------------------------------------------		 *		 *			 *		 */		// recalculate the timecode for a different gmt-offset, like "(UTC|GMT|Z)(-|+)[0-9]{2,4}"		//	while maintaining the actual date/time.		//		// If you rather want to express the time in a different timezone, then use the getter/setter		//	for timezoneOffset.		public function recalculateTimecodeFor( $_gmtOffset:String ):void {			zdTrace.log( this+' recalculateTimecodeFor( "'+$_gmtOffset+'" )', 1 );			var _oldTimezoneOffset:int = zdModel.timezoneOffset;			zdControl.interpretTimezoneOffset( $_gmtOffset );			zdModel.setTimestamp( zdModel.timestamp + _oldTimezoneOffset - zdModel.timezoneOffset );			zdControl.propagateTimestampToDateElements();		}				// get formatted GMT+/-0000 current client gmt offset		public function getFormattedClientGmtOffset():String {			var _pTimezoneOffset:int = zdUtil.minutesToSeconds( zdUtil.getClientTimezoneOffsetInMinutes()) + 				zdUtil.hoursToSeconds( getDstOffsetFor( getClientsTimeInUTC() ));			return zdView.printGmtOffset( _pTimezoneOffset );		}					// get dst offset for this date object		public function getDstOffsetFor( $_timestamp:int ):int {			return zdUtil.getDstOffsetFor( $_timestamp );		}								// get client's now in seconds		public function getClientsTimeInUTC():int {			return zdUtil.getClientsTimeInUTC();		}		/* -- UTILITIES ---------------------------------------------------		 *		 */		// to string		public function toZDateString():String {			return this + ' timestamp: '+zdModel.timestamp+				', year: '+zdModel.year+', month: '+zdModel.month+', day: '+zdModel.day+				', hour: '+zdModel.hour+', minute: '+zdModel.minute+', second: '+zdModel.second+				', timezoneOffset: '+zdModel.timezoneOffset+', weekday: '+zdModel.weekday;		}		}	}