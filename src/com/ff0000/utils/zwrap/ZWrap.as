package com.ff0000.utils.zwrap {		dynamic public class ZWrap {				/* -- ZWRAP Setup & Usage Notes: -------------------------------------------------		 *			 *	1. In your childSWF, import ZWrapClasses, and create a public property, like:		 *		import com.ff0000.utils.zwrap.ZWrapClasses;		 *		public var zwrapClasses:ZWrapClasses;		 *		 *	2. Upon loadComplete of your childSWF, get the definition of ZWrapClasses from the child and instantiate, like:		 *		var ZWrapClasses:Class = $_e.target.applicationDomain.getDefinition( 'com.ff0000.utils.zwrap.ZWrapClasses' ) as Class;		 *		var _zwrapClasses = new ZWrapClasses();		 *		 *	3. Now, add from your parent the classes you want to wrap, like:		 *		_zwrapClasses.addClass( ZDate );		 *		_zwrapClasses.addClass( MainTestImage );		 *		 *	4. Finally, set the child's zwrapClasses property to your newly wrapped ZWrapClasses. like:		 *		_externalBase.zwrapClasses = _zwrapClasses;		 *		 */		public var classes:ZWrapClasses;				/* -- MAKE CLASS ----------------------------------------------------------------------------------		 *	Instantiate a previously added class by $_classname as $_instanceName		 *		 *	$_classname			String		The previously added classname to instantiate		 *	$_instanceName		String		Specifies the instance name on ZWrap.get() in which to save your instantiated class 		 *									OR, if no propertyName, zwrapper will return a singleton reference to requested class		 *	$_args				Array		Arguments to be included in class instantiation		 *		 */		public function make( $_className:String, $_instanceName:String=null, $_args:Array=null ):Class {			if( classes[$_className] != null ) {				var ClassReference:Class = classes[$_className];				if( $_instanceName ) {					if( $_args ) {						switch( $_args.length ) {							case 1 : this[$_instanceName] = new ClassReference( $_args[0] ); break;							case 2 : this[$_instanceName] = new ClassReference( $_args[0], $_args[1] ); break;							case 3 : this[$_instanceName] = new ClassReference( $_args[0], $_args[1], $_args[2] ); break;							case 4 : this[$_instanceName] = new ClassReference( $_args[0], $_args[1], $_args[2], $_args[3] ); break;							case 5 : this[$_instanceName] = new ClassReference( $_args[0], $_args[1], $_args[2], $_args[3], $_args[4] ); break;						}					}					else {						this[$_instanceName] = new ClassReference();					}					return null;				}				else {					return ClassReference;				}			}			else {				trace( '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!' );				trace( '!!' );				trace( '!!  ' + this, ' --> [object '+$_className+'] not found!! ' );				trace( '!!' );				trace( '!!  This child-movie is setup to front-load [object ' + $_className + '] from the parent-movie.' );				trace( '!!  This SWF may still run without error from the parent-movie.' );				trace( '!!' );				trace( '!!	However, if you want to make this child-movie work independently, look for the function "prepareZWrap()"' );				trace( '!!  in the Document Class for this external and uncomment( or add )this line: ' );				trace( '!!    ZWrap.get().classes.addClass( '+$_className+' );' );				trace( '!!' );				trace( '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!' );				return null;			}		}										/* -- SINGLETON SETUP --------------------------------------		 *		 */				public static var instance:ZWrap; 		public static function get():ZWrap {			if( instance == null ) 				instance = new ZWrap( new ZWrapEnforcer());			return instance;		}		public function ZWrap( pvt:ZWrapEnforcer ) {			classes = new ZWrapClasses();		}	}} internal class ZWrapEnforcer{}